# -*- coding:utf-8 -*-
# 哈希表
"""
用顺序表来存数据
存数据时，通过哈希函数计算出出键对应的索引，将值存到索引对应的数据区中
获取数据时，通过哈希函数计算出键对应的索引，将该索引对应的数据取出来
"""
# 哈希冲突:两个不同元素通过哈希函数映射到同一个位置
"""
解决方法:
1.开链法
哈希表的每一个位置都连接一个链表，
当发生冲突时，冲突的元素会被加到该位置的链表的最后
(使用空间大)
2.多哈希法
有多个哈希函数，当使用一个哈希函数发生冲突时，尝试下一个哈希函数，
直至冲突不再发生
3.开放寻址发
如果哈希函数的到位置i已经有数据了，那么就往后探查新的位置来存储这个值
线性探测:如果i已经有数据了，则探查i+1,i+2...以此类推，知道找到空的位置
二次探测:如果位置i被占用，则探查i+1^2,i+2^2...以此类推，直到找到空的位置
"""
"""
扩容问题:
使用开放寻址法，那么顺序表总归会有一天会填满
一般为了保证插入和查找的效率，哈希表一般再元素数量在2/3时就会进行扩容
扩容之后，计算哈希函数也会随之变化，那么里面的数据存储的顺序也会变化
"""

# 数据量小时用开放寻址法比较好，数据量大用开链法比较好