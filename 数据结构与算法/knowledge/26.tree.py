# -*- coding:utf-8 -*-
# 由n个有限节点组成一个具有层次关系的集合，看起来像一颗倒挂的树
"""
每个节点有0个或多个节点
没有父节点的节点称为根节点
每一个非根节点有且只有一个父节点
出来根节点外，每个子节点可以风味多个不相交的子树
"""
"""
术语:
节点的度:一个节点含有的子树的个数
树的度:树中所有节点的度的最大值
叶节点:度为0的节点
子节点:一个节点含有的子树的跟节点称为该节点的子节点
父节点:若一个节点有子节点，那么这个节点就是其子节点的父节点
兄弟节点:具有相同父节点的节点互称为兄弟节点
堂兄弟节点:在同一层的节点互称为堂兄弟节点
祖先节点:从根到该节点所经路径上的所有节点
子孙节点:以某节点为根的子树中的所有节点
节点层次:根节点层次为1，其它节点层次是父节点的层次加1
树的深度:树中所有节点层次的最大值
森林:多棵不相交的树的集合
"""

# 二叉树
"""
二叉树:每个节点最多含有两个子树的树称为二叉树
完全二叉树:除了最底层外,其它各层的节点数目均达到最大值，且最底层的节点应从左往右紧密排列
满二叉树:所有叶节点均在最底层的完全二叉树
二叉搜索树:对于一个节点，它的左子树上的所有节点的值都比它小，右子树上的所有节点的值都比它大
"""

# 二叉树存储结构
"""
顺序存储:从上往下，从左往右的将树存到顺序表中
优点:遍历方便，可以用索引来表示节点间的关系
缺点:肯会对存储空间造成极大的浪费
适用于存完全二叉树

链式存储:每个节点具有左指针域，数据域，右指针域，以此来连接
"""