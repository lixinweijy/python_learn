#coding=gbk
# 用来评判算法的优劣

# 时间频度T:一个算法中的语句执行次数称为语句频度或时间频度
# 上个算法时间频度为T=1001*1001*3

# 时间复杂度:描述随着问题的数据规模的增长，算法的时间频度的增长趋势，记作O(F(n)),F(n)是T（n）的渐进函数
"""
计算时间复杂度时忽略常数项和其它次项选择最高次项
顺序结构:按加法计算
循环结构:按乘法计算
分支结构:取最大值
没有特殊说明时，时间复杂度指最坏的时间复杂度
上个算法时间复杂度为O（n**2）
"""

"""
最优时间复杂度:算法完成工作最少需要多久
最坏时间复杂度:算法完成工作最多需要多久
平均时间复杂度:算法完成工作平均需要多久
均摊时间复杂度:平均时间复杂度的补充，应用场景极少
"""

# 用户输入长度为6的数组，数值由1-6六个函数组成，顺序随机
# 请返回数字6出现的位置

lst=[1,3,5,2,6,4]
for i in range(6):
    if lst[i]==6:
        print(i)

# O(1)<O(logn)<O(n)<O(nlogn)<O(n**2)<O(n**3)<O(2**n)<O(n!)<O(n**n)

